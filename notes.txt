

- images

whenever we use 3rd party services to store images we store images first in our server for temperory time and then in service to manage faliur operation

.env generator



src - making professional backend structre

-- prettier
00 extension to manage code whenever we do code in collab if some peoples give quoma and other not then it gives very very confilicts 


DB - Connection 

// types of db connection professional way  Robust

- # Mongodb
-- We are going to use online 
2 ways to db connection
- all code in index file 

db - folder connection function 
-- export and import anywhere 

whenever - we talk with db or db related work it can causes error 

1 wrap in try catch
2 or in promises 

-- Db is always in another continent 
i.e it requires time - async await is must 

// index.js connection 
/*

const app = express()
(async () => {
    try{
       await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
       // this is app.on which is listner 
       app.on("err", (error)  =>{
            console.log("ERROR: ", error);
            throw error
        })

        app.listen(process.env.PORT, () =>{
            console.log(`App is Listening at port ${process.env.PORT}`)
        })

    }catch(err){
        console.error("ERROR:", error)
        throw err   
    }
})()

*/

IIFE (Immediately Invoked Function Expression)
The code uses an IIFE, which stands for Immediately Invoked Function Expression. This is a function that is defined and immediately executed. The syntax for an IIFE is as follows:
(function() {
    // code here
})();
(async () => {
    // code here
})();


The app.on method is used to set up event listeners in Express. In this case, it listens for an "err" event:


This is professional way to connect to db

------------------------------------------------------------

video - 9

-- async code alwasy return promise 
- CORS - Cross origin resource sharing

-- npm i cookie-parser and npm i cors 

-- app.use for middleware and configuration 
todo read cors docs in npmjs.com

actually each api have err, req, res , next
req - request object
res - response object
next - next function

-- wrapper in utility 

* what are higher order functions
- function which accept function as a parameter or aslo return function as a result

// read utils folder
// read - nodejs api error 

// homeworkd - rework on js fundamentals -
// homework = read about this.data 

video - 9 is very deep
`````````````````````````````````````````````````````````````````
video - 10

created models 

-- use package - mongoose-aggregate-paginate-v2
why - power of Mongodb
-- it is itself is course 

--now we are going to study bcrypt and bcryptjs

read docs both are different 
= helps you to hash password

tocken

jwt - json web token
- for maing tocken 


-- jwt - is a bearer token 
- the person who bear token is the able to access the resource


// sessional and cookie are two different things
// sessional is stored in server and cookie is stored in user browser
// both are used for authentication
------------------------------------------------------------

video - 11
// advanced topics- aggrigation pipeline 
jwt bcrypt ...

Upload file in Backend | Multer

-- file handling - recommended on different server (THRID PARTY)
-- We are using production grade server for file handling

this is most general way to handle file upload for all is same aws, google, microsoft

-- best - cloudinary big companies 

cloudinary - cloudinary is a cloud-based service that allows you to store, manage, and transform your images.

we have two - 
- express file upload
- Multer

we are using Multer
``````````````````

multer ke through hi file upload hoti he

there are tow ways to upload file
1. we get file store in server for temp time then upload to cloudinary
2. we get file directly from client and upload to cloudinary
 
now till 11th video we just setup project _ Production grade

backend engineers have to thing all the corner cases and edge cases
hence they get salary 


--------------------------------------------------------------------

video - 12
http crash course

http - hypertext transfer protocol
http -> datasend - abc - abc
https - hypertext transfer protocol secure
https -> datasend - abc - encrypted - ...


url - uniform resource locator
uri - uniform resource identifier
urn - uniform resource name

What are http headers 

metadata -> key-value sent along with request and response 
- caching, authentication, authorization , manage state 
 x- prefix = 2012 (x- deprecated)

 = request headers - from client 
 = response headers - from server
 = representation headers - encoding / compression
 = payload headers - metadata


most common header

accept : application/json
user - agent
authorization : bearer token
content-type = img/vidw
cookie 
cache-control

cors 
access - control - allow - origin
access - control - allow - credentials
access - control - allow - methods

-----------------------------------------------

security 
cross - origin - embedder - policy
cross - origin - opener - policy
content security policy
x-xss-protection


http methods

get - retrive data
head - no message body (response headers only)
options - what opertions are avaibale
trace - looback test (get some data)
delete - delete data
put - replace a resources
post - interact with a resource ( mostly add)
patch - change part of a resource 


http status code 
1xx - informational
2xx - success
3xx - redirection
4xx - client error
5xx - server error

100 - continue
102 - processing
200 - ok
201 - created
202 - accepted
307 - temporary redirect
308 - permanent redirect
400 - bad request
401 - unauthorized
402 - paymet required 
404 - not found 
500 internal server error
504 gateway timeout 
-------------------------------------------------------------------------


= 13 -----------------------------------------------------------

logic building - big problem - make small problems - solve small problems

----------------------------------------------------------
video - 14


